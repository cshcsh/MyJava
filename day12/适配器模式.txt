设计模式 —— 适配器设计
• 对于Java程序来说,如果一个类要实现一个接口,则肯定要重
写此接口中的全部抽象方法,那么如果，此时一个接口中定
义的抽象方法过多,但是在子类中又用不到这么多抽象方法
的话，则肯定很麻烦,所以此时就需要一个中间的过渡，但
是此过渡类又不希望被直接使用,所以将此过渡类定义成抽
象类最合适,即一个接口首先被一个抽象类（此抽象类通常
称为适配器类）,并在此抽象类中实现若干方法（方法体为
空）,则以后的子类直接继承此抽象类，就可以有选择的重
写所需要的方法。